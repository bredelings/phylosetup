from enamlx.widgets.table_view import (
    TableView, TableViewRow, TableViewItem
)
from enaml.layout.api import vertical, horizontal, align, spacer, vbox
from enaml.widgets.api import (
    Window, Label, Field, Form, DateSelector, CheckBox, GroupBox, Container,
    PushButton, MainWindow, MenuBar, Notebook, Page, FileDialogEx
)

from enaml.core.looper import Looper
from enaml.widgets.menu import Menu
from enaml.widgets.action import Action

from Bio import SeqIO

from collections import defaultdict

from os import path


def letter_fraction(letters, unknown_string, sequences):
    unknown_letters = set(letter for letter in unknown_string.upper())

    counts = defaultdict(int)
    total = 0
    for record in sequences:
        for letter in str(record.seq):
            if letter not in unknown_letters:
                counts[letter.upper()] += 1
                total += 1

    fractions = dict()
    for letter in counts:
        fractions[letter] = float(counts[letter])/total

    total = 0.0
    for letter in letters.upper():
        if letter in fractions:
            total += fractions[letter]

    return total

def letter_count(letters, sequences):
    counts = defaultdict(int)
    total = 0
    for record in sequences:
        for letter in str(record.seq):
            counts[letter.upper()] += 1
            total += 1

    total = 0
    for letter in letters.upper():
        if letter in counts:
            total += counts[letter]

    return total

def guess_alphabet(sequences):
    ATGCN = letter_fraction("ATGCN","-?=",sequences)
    AUGCN = letter_fraction("AUGCN","-?=",sequences)
    AUTGCN = letter_fraction("AUTGCN","-?=",sequences)
    if ATGCN > 0.95 and AUGCN <= ATGCN:
        return "DNA"
    elif AUGCN > 0.95:
        return "RNA"

    if AUTGCN > 0.95:
        T = letter_fraction("T","-?=",sequences)
        U = letter_fraction("U","-?=",sequences)
        return None

    digits = letter_fraction("0123456789","-?X=",sequences)
    if digits > 0.95:
        return "Numeric"

    aa = letter_fraction("ARNDCQEGHILKMFPSTWYVX","-?=",sequences)
    if letter_fraction("ARNDCQEGHILKMFPSTWYVX","-?=",sequences) > 0.9 and AUTGCN<0.5:
        if letter_count("*",sequences) > 0:
            return "Amino Acids + stop"
        else:
            return "Amino Acids"

    return None

enamldef PartitionsTab(Page):
    attr model
    Container:
        TableView: table:
            minimum_size = (640,360)
            horizontal_headers << ['Name', 'Filename', 'Fixed', 'Alphabet', '#Taxa', 'Substitution', 'Indel', 'Scale']
            horizontal_stretch = True
            show_vertical_header = False
            items << model.partitions

            Looper:
                #: Max number of visible rows
                #: If this number is too small, stuff will get jacked
                iterable << range(table.visible_rows)
                TableViewRow:
                    row << table.visible_row + loop_index
                    attr partition << table.items[self.row]
                    clicked :: print("Row %s clicked!"%self.row)

                    Menu:
                        Action:
                            text << 'Row {} menu'.format(table.visible_row+loop_index)
                            triggered :: 'Clicked row'

                    TableViewItem:
                        text << partition.name
                        double_clicked :: print("Double clicked %s"%partition.fixed_alignment)
                        selected :: print("Selection %s is now %s"%(partition.fixed_alignment,change['value']))

                    TableViewItem:
                        text << path.basename( partition.filename )
                        clicked :: print("Clicked %s"%partition.filename)
                        Menu:
                            Action:
                                text << 'Edit {} menu'.format(partition.filename)
                                triggered :: 'Clicked edit'

                    TableViewItem:
                        CheckBox:
                            checked := partition.fixed_alignment
                        double_clicked :: print("Double clicked %s"%partition.fixed_alignment)
                        selected :: print("Selection %s is now %s"%(partition.fixed_alignment,change['value']))

                    TableViewItem:
                        text := partition.alphabet
                        double_clicked :: print("Double clicked %s"%partition.alphabet)
                        selected :: print("Selection %s is now %s"%(partition.alphabet,change['value']))

                    TableViewItem:
                        text << str(len(partition.sequences))

                    TableViewItem:
                        text << model.smodels[partition.substitution_model].name
                        double_clicked :: print("Double clicked %s"%partition.substitution_model)
                        selected :: print("Selection %s is now %s"%(partition.substitution_model,change['value']))

                    TableViewItem:
                        text << model.imodels[partition.substitution_model].name
                        double_clicked :: print("Double clicked %s"%partition.indel_model)
                        selected :: print("Selection %s is now %s"%(partition.indel_model,change['value']))

                    TableViewItem:
                        text << model.scales[partition.scale_model].name
                        double_clicked :: print("Double clicked %s"%partition.scale_model)
                        selected :: print("Selection %s is now %s"%(partition.scale_model,change['value']))
        PushButton: pb1:
            text = 'Add partition'
            clicked ::
                # How do we open a dialog with the design below, when we click this button?
                # How can we modularize this a bit?
                path = FileDialogEx.get_open_file_name(pb1)
                if path:
                    try:
                        sequences = []
                        for sequence in SeqIO.parse(path,format='fasta'):
                            sequences.append(sequence)
                        alphabet = guess_alphabet(sequences)
                        # FIXME: really we should let the use check this:
                        # [ File: [chosen name]  Alphabet: [DNA]  Sites: [all] ]
                        model.add_partition(path, sequences, alphabet)
                    except Exception as e:
                        print(type(e))
                        print(e.args)
                        print(e)

        PushButton:
            text = 'Remove partition'
            clicked :: model.remove_partition()
